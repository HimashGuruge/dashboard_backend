import express from "express";
import cors from "cors";
import jwt from "jsonwebtoken";
import mongoose from "mongoose";
import multer from "multer";
import path from "path";
import { fileURLToPath } from "url";

// Setup __dirname for ES module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Constants
const app = express();
const PORT = 3000;
const JWT_SECRET = "super-secret-key";
const MONGO_URI = "mongodb+srv://123:123@cluster0.muiyvkn.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";

// Middleware
app.use(cors({ origin: "http://localhost:5173", credentials: false }));
app.use(express.json());
app.use("/uploads", express.static(path.join(__dirname, "uploads")));

// Multer setup
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, "uploads/"),
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    cb(null, `${Date.now()}-${Math.round(Math.random() * 1e9)}${ext}`);
  },
});
const upload = multer({ storage });

// MongoDB connection
mongoose.connect(MONGO_URI, { dbName: "authDB" })
  .then(() => console.log("✅ MongoDB connected"))
  .catch((err) => console.error("❌ MongoDB error:", err));

// Schema
const userSchema = new mongoose.Schema({
  firstName: { type: String, required: true },
  lastName:  { type: String, required: true },
  email:     { type: String, required: true, unique: true },
  password:  { type: String, required: true },
  role:      { type: String, default: "user" },
  profilePicture: { type: String, default: "" },
  status:    { type: String, enum: ["Active", "Offline", "Pending"], default: "Offline" }
});
const User = mongoose.model("User", userSchema);






const postSchema = new mongoose.Schema({
  title: { type: String, required: true },
  content: { type: String, required: true },
  image: { type: String, default: "" },
  createdAt: { type: Date, default: Date.now },
  createdBy: { type: mongoose.Schema.Types.ObjectId, ref: "User" }
});

const Post = mongoose.model("Post", postSchema);







// POST /api/posts - Admin only
app.post("/api/posts", upload.single("image"), async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Token missing" });

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    if (decoded.role !== "admin") return res.status(403).json({ message: "Admins only" });

    const { title, content } = req.body;
    const imagePath = req.file ? `/uploads/${req.file.filename}` : "";

    const newPost = new Post({
      title,
      content,
      image: imagePath,
      createdBy: decoded.id,
    });

    await newPost.save();
    res.status(201).json({ message: "Post created", post: newPost });
  } catch (err) {
    res.status(500).json({ message: "Post creation error", error: err.message });
  }
});










// GET /api/posts - Public
app.get("/api/posts", async (req, res) => {
  try {
    const posts = await Post.find().sort({ createdAt: -1 }); // newest first
    res.json(posts);
  } catch (err) {
    res.status(500).json({ message: "Failed to fetch posts", error: err.message });
  }
});




app.get("/api/check-email", async (req, res) => {
  const { email } = req.query;
  if (!email) return res.status(400).json({ exists: false, message: "Email is required" });

  try {
    const exists = await User.exists({ email });
    res.json({ exists: !!exists });
  } catch (err) {
    res.status(500).json({ exists: false, message: "Server error" });
  }
});








app.get("/api/check-email", async (req, res) => {
  const { email } = req.query;
  if (!email) return res.status(400).json({ exists: false, message: "Email is required" });

  try {
    const exists = await User.exists({ email });
    res.json({ exists: !!exists });
  } catch (err) {
    res.status(500).json({ exists: false, message: "Server error" });
  }
});




























// Register
app.post("/api/register", upload.single("profilePicture"), async (req, res) => {
  const { firstName, lastName, email, password } = req.body;
  try {
    const exists = await User.findOne({ email });
    if (exists) return res.status(400).json({ message: "Email already exists" });

    const newUser = new User({
      firstName,
      lastName,
      email,
      password,
      profilePicture: req.file ? `/uploads/${req.file.filename}` : "",
      status: "Offline"
    });

    await newUser.save();
    res.status(201).json({ message: "User registered" });
  } catch (err) {
    res.status(500).json({ message: "Registration error", error: err.message });
  }
});

// Login
app.post("/api/login", async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email, password });
    if (!user) return res.status(401).json({ message: "Invalid credentials" });

    await User.findByIdAndUpdate(user._id, { status: "Active" });

    const token = jwt.sign({
      id: user._id,
      email: user.email,
      role: user.role,
      firstName: user.firstName,
      lastName: user.lastName,
      profilePicture: user.profilePicture
    }, JWT_SECRET, { expiresIn: "1h" });

    res.json({ token });
  } catch (err) {
    res.status(500).json({ message: "Login error", error: err.message });
  }
});

// Logout
app.post("/api/logout", async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Token missing" });

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    await User.findByIdAndUpdate(decoded.id, { status: "Offline" });
    res.json({ message: "Logged out" });
  } catch (err) {
    res.status(403).json({ message: "Invalid token", error: err.message });
  }
});

// Profile
app.get("/api/profile", (req, res) => {
  const authHeader = req.headers.authorization;
  if (!authHeader?.startsWith("Bearer ")) return res.status(401).json({ message: "Token missing" });

  const token = authHeader.split(" ")[1];
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    res.json({ user: decoded });
  } catch {
    res.status(403).json({ message: "Token invalid or expired" });
  }
});

// Get all users (admin only)
app.get("/api/users", async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Token missing" });

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    if (decoded.role !== "admin") return res.status(403).json({ message: "Forbidden: Admins only" });

    const users = await User.find().select("-password");
    res.json(users);
  } catch {
    res.status(403).json({ message: "Token invalid or expired" });
  }
});

// Update user (admin only)
app.put("/api/users/:id", async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Token missing" });

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    if (decoded.role !== "admin") return res.status(403).json({ message: "Forbidden" });

    const updated = await User.findByIdAndUpdate(req.params.id, req.body, { new: true }).select("-password");
    if (!updated) return res.status(404).json({ message: "User not found" });

    res.json({ message: "User updated", user: updated });
  } catch (err) {
    res.status(403).json({ message: "Invalid token", error: err.message });
  }
});

// Delete user (admin only)
app.delete("/api/users/:id", async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Token missing" });

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    if (decoded.role !== "admin") return res.status(403).json({ message: "Forbidden" });

    const deleted = await User.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ message: "User not found" });

    res.json({ message: "User deleted", userId: req.params.id });
  } catch (err) {
    res.status(403).json({ message: "Invalid token", error: err.message });
  }
});








app.delete("/api/posts/:id", async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Token missing" });

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    if (decoded.role !== "admin") return res.status(403).json({ message: "Admins only" });

    const deleted = await Post.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ message: "Post not found" });

    res.json({ message: "Post deleted", id: req.params.id });
  } catch (err) {
    res.status(500).json({ message: "Delete failed", error: err.message });
  }
});





app.put("/api/posts/:id", async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Token missing" });

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    if (decoded.role !== "admin") return res.status(403).json({ message: "Admins only" });

    const updated = await Post.findByIdAndUpdate(
      req.params.id,
      { title: req.body.title, content: req.body.content },
      { new: true }
    );

    if (!updated) return res.status(404).json({ message: "Post not found" });

    res.json({ message: "Post updated", post: updated });
  } catch (err) {
    res.status(500).json({ message: "Update failed", error: err.message });
  }
});




















// Start
app.listen(PORT, () => {
  console.log(`🚀 Server running at http://localhost:${PORT}`);
});
